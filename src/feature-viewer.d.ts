import { FeaturesList, UserOptions } from './interfaces';
declare class FeatureViewer {
    private commons;
    private divId;
    private sequence;
    private transition;
    private subfeaturesTransition;
    private fillSVG;
    private calculate;
    private tool;
    private lastHighlight;
    private parseUserOptions;
    private addYAxis;
    private updateYAxis;
    private applyLastHighlight;
    private brushend;
    private resizeForMobile;
    private calcFlagWidth;
    private updateSequenceView;
    private updateWindow;
    private transition_data;
    private addFeatureCore;
    private drawFeatures;
    private recursivelyRemove;
    private recursiveClose;
    private changeFeature;
    private resetTooltip;
    private getLevel;
    private addFeature;
    private init;
    getCurrentPosition(): number;
    getCurrentZoom(): number;
    showHelp(): void;
    resetHighlight(resetLastHighlight?: boolean): void;
    resetZoom(): void;
    resetAll(): void;
    downloadJpeg(): void;
    downloadPNG(): void;
    clickFlag(d: any): void;
    emptyFeatures(): any;
    flagLoading(id: any): void;
    highlightRegion(region: any, featureid: any): void;
    highlightPosition(region: any, reset?: boolean): void;
    highlightPositions(regions: any): void;
    private recursiveClick;
    collapseAll(): void;
    expandAll(): void;
    stopFlagLoading: (id: any) => void;
    removeResizeListener(): void;
    resizeViewer: () => void;
    addFeatures(featureList: FeaturesList): void;
    onRegionSelected(listener: any): void;
    onFeatureSelected(listener: any): void;
    onButtonSelected(listener: any): void;
    onZoom(listener: any): void;
    onClearSelection(listener: any): void;
    onAnimationOff(listener: any): void;
    constructor(sequence: string, div: string, options?: UserOptions, features?: FeaturesList);
}
export { FeatureViewer };
